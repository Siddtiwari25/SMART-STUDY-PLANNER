<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Smart Study Planner</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f6f9;
      margin: 0;
      padding: 0;
      color: #333;
    }
    header {
      background: #4CAF50;
      padding: 15px;
      color: white;
      text-align: center;
    }
    .container {
      max-width: 900px;
      margin: auto;
      padding: 20px;
    }
    form {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    form input, form button {
      padding: 10px;
      font-size: 14px;
    }
    form input[type="text"] { flex: 2; }
    form input[type="date"], form input[type="time"] { flex: 1; }
    form button {
      background: #4CAF50;
      border: none;
      color: white;
      cursor: pointer;
      border-radius: 5px;
    }
    form button:hover { background: #45a049; }

    ul { list-style: none; padding: 0; }
    li {
      background: white;
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 6px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 1px 4px rgba(0,0,0,0.1);
    }
    .delete-btn {
      background: #e74c3c;
      border: none;
      color: white;
      padding: 6px 10px;
      border-radius: 4px;
      cursor: pointer;
    }
    .delete-btn:hover { background: #c0392b; }

    .timeline, .reminders {
      background: white;
      margin-top: 20px;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .task {
      border-left: 4px solid #4CAF50;
      margin: 10px 0;
      padding: 10px;
      background: #fafafa;
      border-radius: 4px;
    }
    .buttons {
      display: flex;
      gap: 10px;
      margin-top: 20px;
    }
    .buttons button {
      flex: 1;
      padding: 10px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      color: white;
    }
    .export-btn { background: #3498db; }
    .import-btn { background: #9b59b6; }
    .notify-btn { background: #f39c12; }
  </style>
</head>
<body>
  <header>
    <h1>ðŸ“š Smart Study Planner</h1>
    <p>Organize tasks, track progress, and get reminders</p>
  </header>

  <div class="container">
    <!-- Task Form -->
    <form id="taskForm">
      <input type="text" id="taskTitle" placeholder="Task Title" required>
      <input type="date" id="taskDate" required>
      <input type="time" id="taskTime" required>
      <button type="submit">Add Task</button>
    </form>

    <!-- Task List -->
    <h2>Your Tasks</h2>
    <ul id="taskList"></ul>

    <!-- Timeline -->
    <h2>Timeline</h2>
    <div class="timeline" id="timeline"></div>

    <!-- Reminders -->
    <h2>Upcoming Reminders</h2>
    <div class="reminders">
      <ul id="reminders"></ul>
    </div>

    <!-- Buttons -->
    <div class="buttons">
      <button class="export-btn" onclick="exportTasks()">Export JSON</button>
      <button class="import-btn" onclick="importTasks()">Import JSON</button>
      <button class="notify-btn" onclick="enableNotifications()">Enable Notifications</button>
    </div>
  </div>

  <script>
    let tasks = JSON.parse(localStorage.getItem("tasks") || "[]");

    // Save tasks
    function saveTasks() {
      localStorage.setItem("tasks", JSON.stringify(tasks));
    }

    // Render tasks
    function renderTasks() {
      const list = document.getElementById("taskList");
      list.innerHTML = "";
      tasks.forEach((task, i) => {
        const li = document.createElement("li");
        li.innerHTML = `
          <span>${task.title} - ${task.date} ${task.time}</span>
          <button class="delete-btn" onclick="deleteTask(${i})">Delete</button>
        `;
        list.appendChild(li);
      });
      renderTimeline();
      renderReminders();
    }

    // Timeline
    function renderTimeline() {
      const timeline = document.getElementById("timeline");
      timeline.innerHTML = "";
      tasks.sort((a,b)=> new Date(a.date+"T"+a.time) - new Date(b.date+"T"+b.time))
        .forEach(task=>{
          const div = document.createElement("div");
          div.className="task";
          div.textContent = `${task.date} ${task.time} - ${task.title}`;
          timeline.appendChild(div);
        });
    }

    // Reminders list
    function renderReminders() {
      const ul = document.getElementById("reminders");
      ul.innerHTML = "";
      const now = new Date();
      tasks.forEach(task=>{
        const t = new Date(task.date+"T"+task.time);
        if(t>now) {
          const li=document.createElement("li");
          li.textContent = `${task.title} at ${t.toLocaleString()}`;
          ul.appendChild(li);
        }
      });
    }

    // Add task
    document.getElementById("taskForm").addEventListener("submit", e=>{
      e.preventDefault();
      const title = document.getElementById("taskTitle").value;
      const date = document.getElementById("taskDate").value;
      const time = document.getElementById("taskTime").value;
      const task = {title,date,time,id:Date.now()};
      tasks.push(task);
      saveTasks();
      scheduleReminder(task);
      renderTasks();
      e.target.reset();
    });

    // Delete task
    function deleteTask(i){
      tasks.splice(i,1);
      saveTasks();
      renderTasks();
    }

    // Export tasks
    function exportTasks(){
      const blob=new Blob([JSON.stringify(tasks)],{type:"application/json"});
      const a=document.createElement("a");
      a.href=URL.createObjectURL(blob);
      a.download="tasks.json";
      a.click();
    }

    // Import tasks
    function importTasks(){
      const input=document.createElement("input");
      input.type="file"; input.accept=".json";
      input.onchange=e=>{
        const file=e.target.files[0];
        const reader=new FileReader();
        reader.onload=()=>{
          try{
            tasks=JSON.parse(reader.result);
            saveTasks(); renderTasks();
          } catch(err){ alert("Invalid file"); }
        };
        reader.readAsText(file);
      };
      input.click();
    }

    // Enable browser notifications
    function enableNotifications(){
      if("Notification" in window){
        Notification.requestPermission().then(perm=>{
          if(perm==="granted"){
            alert("Notifications enabled!");
          }
        });
      } else {
        alert("Browser does not support notifications.");
      }
    }

    // Schedule reminder for a task
    function scheduleReminder(task) {
      if("Notification" in window && Notification.permission==="granted"){
        const time = new Date(task.date+"T"+task.time).getTime();
        const delay = time - Date.now() - (5*60*1000); // 5 min before
        if(delay>0){
          setTimeout(()=>{
            new Notification("Reminder: " + task.title, {
              body: "Due at " + task.date + " " + task.time
            });
          }, delay);
        }
      }
    }

    // Reschedule reminders on load
    tasks.forEach(scheduleReminder);

    // Initial render
    renderTasks();
  </script>
</body>
</html>
